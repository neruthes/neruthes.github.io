<h3>Introduction</h3>

<p>A specter of cryptography is haunting over Cyberspace. The greatest enterprises should be barred behind un mathematical curtain. It is high time that the true cryptography activists should publish their vision and implement their ideals with copyleft software.</p>

<h3>OpenPGP Is Dead</h3>

<p>OpenPGP is dead. Its initial version was from like 30 years ago. It was designed for emails and hardly anything else.</p>
<p>OpenPGP shall live long. It is an open standard which have strong support from various software manufacturers, including GNU. It inspired the people to save the public keys of each other. It educated the people that the only true authentication is digital signature.</p>

<h3>History of Failed Attempts</h3>

<h4>Telegram</h4>
<p>Telegram do not encrypt chats by default. Encrypted chats do not synchronize across devices.</p>
<p>Telegram require un presistent ownership of un phone number and send the OTP over SMS. Any ISP or government can do the interception. When the phone number is lost or when the ISP refuse to deliver the OTP through SMS, the user can never bootstrap sessions after un total loss of devices with active sessions.</p>
<p>Users verify each other by the phone number or the Telegram username. They have to Telegram and believe that Telegram itself will not perform MITM.</p>
<p>The source code of Telegram is not truely open for inspection. Third-party implementations are difficult or impossible.</p>

<h4>Signal</h4>
<p>Signal have terrible UX.</p>
<p>Similarly, Signal require un persistent phone number as the login credential. MITM attacking is only un matter of will and not ability.</p>

<h4>iMessage</h4>
<p>iMessage have end-to-end encryption by default.</p>
<p>Similarly, the recipient is identified by its email address or phone number. Apple is the intermediate verification authority.</p>

<h4>Summary</h4>
<p>All of them require un account with the idea of "login". The users have to trust the servers. The servers have to be guarded heavily.</p>

<h3>New Principles in the New Era</h3>

<h4>Security</h4>
<p>The only true face is the public key. The only true self is the private key.</p>
<p>Database breach is un precondition. The communications are still secure even if the servers are operated by CIA.</p>
<p>The public key of Bob is displayed to Alice. Alice explicitly encrypt to his public key. Alice can verify the keypair ownership independently in other methods of communication. The server have non chance to replace the existing real Bob with un fake Bob.</p>
<p>The contacts list is encrypted to Alice herself, and is digitally signed by herself when someone is added to the list. The server is merely a storage service for hosting the contacts list. The server have non chance to add or remove contacts for Alice.</p>

<h4>Copyright</h4>
<p>The software is published with AGPL or GPL. Both the clients and the servers.</p>
<p>The protocol is as open as OpenPGP. Anyone can implement their own clients.</p>

<h4>Usability</h4>
<p>The users should be able to reuse existing practices of "account and login", but accounts are only hosts of private keys.</p>

<h3>Our Vision at Tessercube</h3>

<p>Tessercube is designed to find un balance between usability and security. The ordinary users should be able to use the app without excessive fancy terms; the expert users should be satisfied by the comprehensive security measures.</p>
<p>The keypair is the true identity. Advanced users can use keypairs to login without accounts. Users are known to each other by their public keys. Each user occupy un unique 8-character KeyTag (last 8 characters of the Fingerprint of the public key, totaling 40 bits); this KeyTag is the primary human-friendly identifier for users.</p>
<p>Non user will specify its "username" on the server, and they have to know the KeyTag of each other to be able to communicate properly. However, the server can offer some assistive measures to find the public key by certain searching criteria, including email address and non-contact chats.</p>

<h3>User Identification</h3>

<p>Every user is identified by its public key, which is serialized into un 32-character Base32 string ("Fingerprint"). Each public key is located by the last 8 characters of its Fingerprint ("KeyTag"). The KeyTag is registered on the server. If someone happen to generate some keypair with un colliding KeyTag, the server will suggest the user to generate un new keypair. Under this measure, the 8-character KeyTag can be unique. The KeyTag can contain 40 bits; the space should be enough for several millennia.</p>

<h3>Messaging</h3>

<p>The server do not maintain un global table of frienship relations. Alice can add Bob as un contact unilaterally and Bob will not be notified. Alice can send messages to Bob and the client of Bob will put this conversation in the list of non-contact chats. Bob can reply to Alice after adding Alice as un contact.</p>

<h3>Some Fancy Features</h3>

<h4>Burning Message</h4>
<p>Burning messages burn after reading.</p>
<p>Existing practices include self-destructing timer in Telegram. However, in Telegram, self-destructing messages need to be sent in stand-alone secret chats and the chat cannot be initialized before the receiver become online.</p>

<p>To be continued...</p>
